data$Date.Killed.day.of.month <- as.factor(data$Date.Killed.day.of.month)
data$Date.Killed.day.of.week <- as.factor(data$Date.Killed.day.of.week )
data$Date.Killed.month <- as.factor(data$Date.Killed.month)
levels(data$Date.Killed.month) <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "December")
data$Date.Killed.month <- droplevels(data$Date.Killed.month)
back_up_2 <- data$Date.Killed.month[c(1,4400,7000)]
kable(data.frame(back_up_1, back_up_2), col.names = c("Initial", "Transformed"), caption = "Feature re-encoding: Date Killed Month")
pre_scale_ohe_data <- data
# Min max normalization ---------------------------------------------------
norm_minmax <- function(x){
(x- min(x)) /(max(x)-min(x))
}
idx <- sapply(data, is.numeric)
data[,idx] <- sapply(data[,idx], norm_minmax)
dmy <- dummyVars(" ~ .", data = data)
data_ohe <- data.frame(predict(dmy, newdata = data))
data_ohe_mat <- as.matrix(data_ohe)
names(data_ohe_mat) <- names(data_ohe)
load("grown_99.rda")
grown_99$nhood
grown_99$nodes
grown_99$GT
grown_99$norm_param
grown_99$data
grown_99$nodes$position
grown_99$nodes$codes
grown_99$nodes$distance
grown_99$nodes$freq
mean(74+85+76+85+78+77+75+92+82)
devtools::install_github("ewenme/fplr")
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
knitr::opts_chunk$set(echo = TRUE)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df_cat
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(df$hypertension)
df$heart_disease <- as.factor(df$heart_disease)
df$stroke <- as.factor(df$stroke)
df$bmi <- as.numeric(df$bmi)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
df <- df[complete.cases(df),]
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
View(df)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
anyNA(df)
lapply(df, anyNA)
lapply(df, anyNA)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
GGally::ggpairs(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(ddf$heart_disease))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(ddf$stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
df
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
# df <- df[complete.cases(df),]
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
summary(df)
df[df$gender == "Other"]
df[df$gender == "Other",]
df[df$gender == "Other",] <- NULL
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
df[df$gender == "Other",] <- NULL
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
df <- df[!df$gender == "Other",]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
df <- df[!df$gender == "Other",]
df
summary(df)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
df$stroke
levels(df$stroke)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
# df$hypertension <- as.factor(as.character(df$hypertension))
# df$heart_disease <- as.factor(as.character(df$heart_disease))
# df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
# df$hypertension <- as.factor(as.character(df$hypertension))
# df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
# df$hypertension <- as.factor(as.character(df$hypertension))
# df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
df <- df[complete.cases(df),]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
remotes::install_github("wiscostret/fplscrapR")
remotes::install_github('ewenme/understatr')
a <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//FPL_Understat_IDs.csv')
View(a)
fpl <- read.csv('C://Users//jd-vz//Desktop//fpl.csv')
understat <- read.csv('C://Users//jd-vz//Desktop//understat.csv')
View(fpl)
View(fpl)
View(understat)
merge(fpl, understat)
View(fpl)
merge(fpl, understat, by = c('player_name', 'date'))
a <- merge(fpl, understat, by = c('player_name', 'date'))
View(a)
b <- merge(fpl, understat, by = c('player_name', 'understat_ID'))
b <- merge(fpl, understat, by = c('player_name', 'Understat_ID'))
b <- merge(fpl, understat, by = c('player_name', 'FPL_ID'))
View(a)
install.packages('devtools')
library(devtools)
devtools::install_github("souravbose1991/Auto-EDA")
library(Auto-EDA)
install.packages("devtools")
library(Auto-EDA)
(Auto-EDA)
library(Auto-EDA)
library(Auto-EDA)
devtools::install_github("souravbose1991/Auto-EDA")
devtools::install_github("souravbose1991/Auto-EDA")
library(Auto-EDA)
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21)
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
players_raw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_raw.csv')
players_type <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_type.csv')
teams <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/teams.csv')
library(knitr)
library(kableExtra)
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
players_raw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_raw.csv')
players_type <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_type.csv')
teams <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/teams.csv')
head(fixtures) %>% kable
head(fixtures) %>% kable()
head(players_raw) %>% kable()
head(players_raw)[1:10] %>% kable()
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw)[1:10] %>% kable() %>% print()
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw)[1:8] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw)[1:8] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
\begin{longtable}{rrrrrrrr}
\toprule
chance\_of\_playing\_next\_round & chance\_of\_playing\_this\_round & code & cost\_change\_event & cost\_change\_event\_fall & cost\_change\_start & cost\_change\_start\_fall & dreamteam\_count\\
\midrule
0 & 0 & 37605 & 0 & 0 & -3 & 3 & 0\\
0 & 0 & 39476 & 0 & 0 & -2 & 2 & 0\\
100 & 50 & 41270 & 0 & 0 & -1 & 1 & 0\\
100 & 100 & 54694 & 0 & 0 & -7 & 7 & 3\\
100 & 100 & 58822 & 0 & 0 & -4 & 4 & 0\\
\addlinespace
100 & 100 & 59966 & 0 & 0 & -1 & 1 & 4\\
\bottomrule
\end{longtable}
head(players_raw)[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
# All features with respect to position -----------------------------------
autoEDA(df, y = 'position', IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 1, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//', filename = "ExploratoryPlots",
verbose = TRUE)
head(players_raw)[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
View(players_raw)
View(players_type)
View(teams)
View(teams)
library(knitr)
library(kableExtra)
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
players_raw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_raw.csv')
players_type <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_type.csv')
teams <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/teams.csv')
gw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players/Aaron_Connolly_78/gw.csv')
history <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players/Aaron_Connolly_78/history.csv')
View(history)
View(gw)
View(gw)
View(fixtures)
View(players_type)
View(players_type)
View(players_raw)
head(players_raw[.c('first_name')])[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw[,c('first_name')])[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
players_raw[,'first_name']
View(players_raw)
players_raw[c('first_name')]
View(players_raw)
players_raw[c('first_name', 'element_type')]
players_raw[c('first_name', 'second_name', 'id', 'element_type')]
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')]
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% kable()
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
head(players_raw)[c(8:11, 13:15)] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'transfers_in')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'transfers_in')] %>% head(20) %>%  kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'team')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
merged_gw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/gws/merged_gw.csv')
View(merged_gw)
View(merged_gw)
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/')
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/cleaned_fpl.csv')
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/fpl.csv')
View(train_fpl)
cleaned_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/cleaned_fpl.csv')
View(cleaned_fpl)
fixtures$code
fixtures$team_h_difficulty
unique(fixtures$team_h_difficulty)
unique(fixtures$team_h_difficulty)
View(fixtures)
devtools::install_github("JaseZiv/worldfootballR")
library(worldfootballR)
understat_league_season_shots(league = "EPL", season_start_year = 2020)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
# Separate numerical + categorical ----------------------------------------
setwd('C://Users//jd-vz//Desktop//Code//src//explore//')
df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//2019-20//training//cleaned_fpl.csv')
df$X <- NULL
df$player_name <- NULL
df$kickoff_time <- NULL
num_feat <- df[sapply(df, is.numeric)]
cat_feat <- df[,colnames(df)[grepl('factor|logical|character',sapply(df,class))]]
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
fit <- rpart(total_points ~., data = df,
parms = list(split = "information"),
control = rpart.control(cp = 0,
xval = 0,
minsplit = 5,
maxdepth = 5,
minbucket = 10))
summary(fit)
fancyRpartPlot(fit,
type = 5,
main = "Unpruned CART",
sub = NULL)
fit_party <- as.party.rpart(fit)
fit_party
rules_tidy <- tidyRules(fit)
rules_tidy
check <- data.frame(ID = rules_tidy$id,
IF = rules_tidy$LHS,
THEN = rules_tidy$RHS,
Support = rules_tidy$support,
# Coverage = paste0(round(rules_tidy$support/nrow(train_smote)*100,3), "%"),
Coverage = rules_tidy$support/nrow(df),
Accuracy = rules_tidy$confidence)
# Univariate analysis -----------------------------------------------------
# According to all positions ----------------------------------------------
autoEDA(df_temp, y = 'position', IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 0.005, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//', filename = "all_positions",
verbose = TRUE)
df_temp <- df
# According to all positions ----------------------------------------------
autoEDA(df_temp, y = 'position', IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 0.005, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//', filename = "all_positions",
verbose = TRUE)

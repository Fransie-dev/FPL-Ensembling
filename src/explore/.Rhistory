for(i in 1:ncol(cat_feat)) plot(cat_feat[,i], main=names(cat_feat)[i])
# Format table neatly -----------------------------------------------------
data_test <- data %>% mutate_all(~replace(., . == "", NA))
data_test[,cat_feat_idx] <- droplevels(data_test[,cat_feat_idx])
T4 <- knitr::kable(data.frame(Count = sapply(data_test,
function(x) length(x)),
Unique = sapply(data_test,
function(x) length(unique(x))),
Missing = paste0(round(sapply(data_test,
function(x)
100*sum(is.na(x))/length(x)),2),
"%"),
Type = sapply(data_test, class)
), caption = "Feature Descriptive Statistics",
digits = 2, align = "c")
T4
a <- aggregate(Victim.Age~Victim.Age.Group, data, min)
b <- aggregate(Victim.Age~Victim.Age.Group, data, max)
data.frame(Victim.Age.Group = a$Victim.Age.Group, min = a$Victim.Age, max = b$Victim.Age) %>% kable(caption = "Age Groups")
library("ggmap")
library(maptools)
library(maps)
mapWorld <- borders("world", colour="gray50", fill="white")
mp <- ggplot() + mapWorld
mp + geom_point(data = data, mapping = aes(x = Longitude, y = Latitude, colour = "red"), size = 0.5,show.legend = F)
data$Date.Killed <- data$Date.Killed.year <- data$City <- data$Victim.Name <- data$Victim.Age.Group <- data$Source <- data$Latitude <- data$Longitude <- NULL
library(pander)
idx <- sapply(data, class) %in% c("integer", "numeric")
mcor <- data[,idx]
mcor <- mcor[complete.cases(mcor),]
mcor<-round(cor(mcor), 2)
colnames(mcor) <-  gsub('[[:punct:] ]+',' ',colnames(mcor))
# Hide upper triangle
upper<-as.data.frame(mcor)
rownames(upper) <- colnames(mcor)
upper %>% knitr::kable(col.names = colnames(mcor),
align = "c", caption = "Correlation Matrix")
data_test <- data %>% mutate_all(~replace(., . == "", NA))
T4 <- knitr::kable(data.frame(Count = sapply(data_test,
function(x) length(x)),
Unique = sapply(data_test,
function(x) length(unique(x))),
Perc_miss = paste0(round(sapply(data_test,
function(x)
100*sum(is.na(x))/length(x)),2),
"%"),
Type = sapply(data_test, class)
), caption = "Feature Descriptive Statistics",
digits = 2, align = "c")
T4
# Note, skip for now
# Remove Outliers ---------------------------------------------------------
data$Date.Killed.day.of.month <- as.factor(data$Date.Killed.day.of.month)
data$Date.Killed.day.of.week <- as.factor(data$Date.Killed.day.of.week)
data$Date.Killed.month <- as.factor(data$Date.Killed.month)
# Note: From original data
idx <- sapply(data, is.numeric)
summary(data[,idx]) %>% kable(caption = "Prior to outlier removal")
remove_outliers<-function(num_col)
{
qnt<-quantile(num_col, probs=c(.25, .75), na.rm = T)
upper_lim<-qnt[2]+1.5*IQR(num_col,na.rm = T)
lower_lim<-qnt[1]-1.5*IQR(num_col,na.rm = T)
for(i in 1:length(num_col)){
if(num_col[i] > upper_lim && !is.na(num_col[i])) num_col[i] <- upper_lim
if(num_col[i] < lower_lim && !is.na(num_col[i])) num_col[i] <- lower_lim
}
return(num_col)
}
out_col <- colnames(data[,idx])
data_no_out <- data
for(i in 1:length(out_col)) data[,out_col[i]]<-remove_outliers(data[,out_col[i]])
summary(data[,idx]) %>% kable(caption = "After outlier removal")
data$Date.Killed.day.of.month <- as.factor(data$Date.Killed.day.of.month)
data$Date.Killed.day.of.week <- as.factor(data$Date.Killed.day.of.week)
data$Date.Killed.month <- as.factor(data$Date.Killed.month)
levels(data$Date.Killed.month) <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "December")
data$Date.Killed.month <- droplevels(data$Date.Killed.month)
data$Date.Killed <- data$Date.Killed.year <- data$City <- data$Victim.Name <- data$Victim.Age.Group <- data$Source <- data$Latitude <- data$Longitude <- NULL
data$Victim.Age[is.na(data$Victim.Age)] <- median(data$Victim.Age, na.rm = T)
idx <- sapply(data, is.factor)
nms <- colnames(data[,idx])
for(i in 2:20)  levels(data[,nms[i]])[1] <- "Missing"
data <- droplevels.data.frame(data)
back_up_1 <- c(12,5,8)
data$Date.Killed.day.of.month <- as.factor(data$Date.Killed.day.of.month)
data$Date.Killed.day.of.week <- as.factor(data$Date.Killed.day.of.week )
data$Date.Killed.month <- as.factor(data$Date.Killed.month)
levels(data$Date.Killed.month) <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "December")
data$Date.Killed.month <- droplevels(data$Date.Killed.month)
back_up_2 <- data$Date.Killed.month[c(1,4400,7000)]
kable(data.frame(back_up_1, back_up_2), col.names = c("Initial", "Transformed"), caption = "Feature re-encoding: Date Killed Month")
pre_scale_ohe_data <- data
# Min max normalization ---------------------------------------------------
norm_minmax <- function(x){
(x- min(x)) /(max(x)-min(x))
}
idx <- sapply(data, is.numeric)
data[,idx] <- sapply(data[,idx], norm_minmax)
dmy <- dummyVars(" ~ .", data = data)
data_ohe <- data.frame(predict(dmy, newdata = data))
data_ohe_mat <- as.matrix(data_ohe)
names(data_ohe_mat) <- names(data_ohe)
load("grown_99.rda")
grown_99$nhood
grown_99$nodes
grown_99$GT
grown_99$norm_param
grown_99$data
grown_99$nodes$position
grown_99$nodes$codes
grown_99$nodes$distance
grown_99$nodes$freq
mean(74+85+76+85+78+77+75+92+82)
devtools::install_github("ewenme/fplr")
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
knitr::opts_chunk$set(echo = TRUE)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df_cat
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(df$hypertension)
df$heart_disease <- as.factor(df$heart_disease)
df$stroke <- as.factor(df$stroke)
df$bmi <- as.numeric(df$bmi)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
df <- df[complete.cases(df),]
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
View(df)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
anyNA(df)
lapply(df, anyNA)
lapply(df, anyNA)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
GGally::ggpairs(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(ddf$heart_disease))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(ddf$stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
df
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
# df <- df[complete.cases(df),]
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
head(df) # First 5 entries
df_cat_idx <- sapply(df, is.factor)
df_num <- df[,!df_cat_idx]
# df_num # Hypertension, heart_disease and stroke wrongly read as numeric features
df_cat <- df[,df_cat_idx]
# df_cat # BMI incorrectly read as categorical feature
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
df <- df[complete.cases(df),]
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
summary(df)
df[df$gender == "Other"]
df[df$gender == "Other",]
df[df$gender == "Other",] <- NULL
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
df[df$gender == "Other",] <- NULL
summary(df)
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
df <- df[!df$gender == "Other",]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$age)
df <- df[!df$gender == "Other",]
df
summary(df)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = gender))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
df$stroke
levels(df$stroke)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
# df$hypertension <- as.factor(as.character(df$hypertension))
# df$heart_disease <- as.factor(as.character(df$heart_disease))
# df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
# df$hypertension <- as.factor(as.character(df$hypertension))
# df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
GGally::ggpairs(df, mapping =  ggplot2::aes(color = stroke))
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
# df$hypertension <- as.factor(as.character(df$hypertension))
# df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
df <- df[complete.cases(df),]
setwd(dir = "C:/Users/jd-vz/Desktop")
df <- read.csv("healthcare-dataset-stroke-data.csv")
summary(df)
df$hypertension <- as.factor(as.character(df$hypertension))
df$heart_disease <- as.factor(as.character(df$heart_disease))
df$stroke <- as.factor(as.character(df$stroke))
df$bmi <- as.numeric(as.character(df$bmi))
summary(df$gender)
df <- df[!df$gender == "Other",]
levels(df$stroke)
remotes::install_github("wiscostret/fplscrapR")
remotes::install_github('ewenme/understatr')
a <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//FPL_Understat_IDs.csv')
View(a)
fpl <- read.csv('C://Users//jd-vz//Desktop//fpl.csv')
understat <- read.csv('C://Users//jd-vz//Desktop//understat.csv')
View(fpl)
View(fpl)
View(understat)
merge(fpl, understat)
View(fpl)
merge(fpl, understat, by = c('player_name', 'date'))
a <- merge(fpl, understat, by = c('player_name', 'date'))
View(a)
b <- merge(fpl, understat, by = c('player_name', 'understat_ID'))
b <- merge(fpl, understat, by = c('player_name', 'Understat_ID'))
b <- merge(fpl, understat, by = c('player_name', 'FPL_ID'))
View(a)
install.packages('devtools')
library(devtools)
devtools::install_github("souravbose1991/Auto-EDA")
library(Auto-EDA)
install.packages("devtools")
library(Auto-EDA)
(Auto-EDA)
library(Auto-EDA)
library(Auto-EDA)
devtools::install_github("souravbose1991/Auto-EDA")
devtools::install_github("souravbose1991/Auto-EDA")
library(Auto-EDA)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
# Separate numerical + categorical ----------------------------------------
setwd('C://Users//jd-vz//Desktop//Code//src//explore//')
df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//2019-20//training//cleaned_fpl.csv')
df$X <- NULL
df$player_name <- NULL
df$kickoff_time <- NULL
num_feat <- df[sapply(df, is.numeric)]
cat_feat <- df[,colnames(df)[grepl('factor|logical|character',sapply(df,class))]]
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
fit <- rpart(total_points ~., data = df,
parms = list(split = "information"),
control = rpart.control(cp = 0,
xval = 0,
minsplit = 5,
maxdepth = 5,
minbucket = 10))
summary(fit)
summary(fit)
prune(fit)
prune(fit, cp=0.01)
fancyRpartPlot(prune(fit, cp=0.01),
type = 5,
main = "Unpruned CART",
sub = NULL)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
# Separate numerical + categorical ----------------------------------------
setwd('C://Users//jd-vz//Desktop//Code//src//explore//')
df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//2019-20//training//cleaned_fpl.csv')
df$X <- NULL
df$player_name <- NULL
df$kickoff_time <- NULL
num_feat <- df[sapply(df, is.numeric)]
cat_feat <- df[,colnames(df)[grepl('factor|logical|character',sapply(df,class))]]
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
fit <- rpart(total_points ~., data = df,
parms = list(split = "information"),
control = rpart.control(cp = 0,
xval = 0,
minsplit = 5,
maxdepth = 5,
minbucket = 10))
summary(fit)
fancyRpartPlot(fit,
type = 5,
main = "Unpruned CART",
sub = NULL)
fit_party <- as.party.rpart(fit)
fit_party
(fit)
rules_tidy
check <- data.frame(ID = rules_tidy$id,
IF = rules_tidy$LHS,
THEN = rules_tidy$RHS,
Support = rules_tidy$support,
# Coverage = paste0(round(rules_tidy$support/nrow(train_smote)*100,3), "%"),
Coverage = rules_tidy$support/nrow(df),
Accuracy = rules_tidy$confidence)
rules_tidy <- tidyRules(fit)
rules_tidy
check <- data.frame(ID = rules_tidy$id,
IF = rules_tidy$LHS,
THEN = rules_tidy$RHS,
Support = rules_tidy$support,
# Coverage = paste0(round(rules_tidy$support/nrow(train_smote)*100,3), "%"),
Coverage = rules_tidy$support/nrow(df),
Accuracy = rules_tidy$confidence)

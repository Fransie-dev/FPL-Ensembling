players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')]
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% kable()
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
head(players_raw)[c(8:11, 13:15)] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'transfers_in')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'transfers_in')] %>% head(20) %>%  kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'team')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
merged_gw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/gws/merged_gw.csv')
View(merged_gw)
View(merged_gw)
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/')
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/cleaned_fpl.csv')
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/fpl.csv')
View(train_fpl)
cleaned_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/cleaned_fpl.csv')
View(cleaned_fpl)
fixtures$code
fixtures$team_h_difficulty
unique(fixtures$team_h_difficulty)
unique(fixtures$team_h_difficulty)
View(fixtures)
devtools::install_github("JaseZiv/worldfootballR")
library(worldfootballR)
understat_league_season_shots(league = "EPL", season_start_year = 2020)
# Separate numerical + categorical ----------------------------------------
df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
library(autoEDA)
# Initial distributions ---------------------------------------------------
df_temp <- df
autoEDA(df_temp)
autoEDA(df_temp, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE))
autoEDA(df_temp, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE)
library(tidyverse);
iris %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(negate(is.numeric)) %>%    gather() %>%    ggplot(aes(value))+ geom_bar()+ facet_wrap(~key)
u
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
my_plots <- lapply(names(iris), function(var_x){
p <-
ggplot(iris) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
my_plots <- lapply(names(iris), function(var_x){
p <-
ggplot(iris) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
library(cowplot)
my_plots <- lapply(names(iris), function(var_x){
p <-
ggplot(iris) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
install.packages('skimr')
install.packages('skimr')
library(skimr)
skim(df)
p <- p + geom_density()
p <-   ggplot(df) + aes_string(total_points)
p <- p + geom_density()
p <-   ggplot(df) + aes_string(total_points)
p <-   ggplot(df) + aes_string('total_points')
p <- p + geom_density()
p
autoEDA(df_temp, IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 0.005, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE)
library(cowplot)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(df[[var_x]])) {
p <- p + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
library(cowplot)
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(df[[var_x]])) {
p <- p + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
}
# else {
#   p <- p + geom_bar()
# }
})
plot_grid(plotlist = my_plots)
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) +  geom_histogram(aes(y=..density..), colour="black", fill="white") +geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot() + geom_density()+ facet_wrap(~key);
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + facet_wrap(~key, scales = "free");
plot_grid(plotlist = my_plots, ncol = 3)
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
lapply(df, is.numeric())
lapply(df, is.numeric
lapply(df, is.numeric)
# df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
num_feat <- df[sapply(df, is.numeric)]
plot_grid(plotlist = my_plots, ncol = 4, nrow = 7)
plot_grid(plotlist = my_plots, ncol = 4, nrow = 7,align = 'hv')
devtools::install_github("stefan-schroedl/plotluck")
plotluck::plotluck(df, total_points)
plotluck::plotluck(df, 'total_points')
plotluck::plotluck(df, total_points)
plotluck::plotluck(df, total_points~.)
plotluck::plotluck(df, total_points~position)
plotluck::plotluck(df, total_points~was_home)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Fix unique understat errors ---------------------------------------------
df_u$npg <- as.factor(df_u$npg)
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# Encode discrete features as factors -------------------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Fix unique understat errors ---------------------------------------------
df_u$npg <- as.factor(df_u$npg)
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# Encode discrete features as factors -------------------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
autoEDA(df_temp, 'was_home', sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = "univariate",
verbose = TRUE)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
autoEDA(df_u, 'was_home', sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = "univariate",
verbose = TRUE)
autoEDA(df_u, 'was_home', sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = "univariate",
verbose = TRUE)
# Initial distributions ---------------------------------------------------
for(i in c('clean_sheets', 'own_goals', 'penalties_missed', 'was_home', 'red_cards', 'was_home', 'yellow_cards', 'season')) autoEDA(df_u, i, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = i,
verbose = TRUE)
xtable(summarize(df_u, type = "factor",
variables = "clean_sheets", group = "was_home"),
caption = "Example table for Fisher's exact test",
label = "tab:Fisher")
xtable(summarize(df_u, type = "factor",
variables = "position", group = "was_home"),
caption = "Example table for Fisher's exact test",
label = "tab:Fisher")
# Pairs plot of ten highest correlated features ---------------------------
top_10 <- c('total_points', 'position', 'bps', 'bonus', 'influence', 'goals_scored', 'npg', 'ict_index', 'clean_sheets', 'assists', 'xG')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u <- df_u[top_10]
GGally::ggpairs(df_u, mapping = aes(colour = position, alpha = 0.6), title="Pairs plot: Unscaled, clustered dataset with Gender and Cluster included") + theme_grey(base_size = 10)
# Pairs plot of ten highest correlated features ---------------------------
library(ggplot2)
library(GGally)
top_10 <- c('total_points', 'position', 'bps', 'bonus', 'influence', 'goals_scored', 'npg', 'ict_index', 'clean_sheets', 'assists', 'xG')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u <- df_u[top_10]
ggpairs(df_u, mapping = aes(colour = position, alpha = 0.6), title="Pairs plot: Unscaled, clustered dataset with Gender and Cluster included") + theme_grey(base_size = 10)
load("C:/Users/jd-vz/Desktop/Code/src/explore/figs/.RData")
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
# Updated univariate plots ------------------------------------------------
library(ggplot2); library(tidyverse); library(cowplot);
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
df_f$Source <- 'Fantasy'
df_u$Source <- 'Understat'
df_f$shots <- df_f$key_passes <- df_f$xG <- df_f$xA <- df_f$npg <- df_f$npxG <- df_f$xGChain <- df_f$xGChain <- df_f$xGBuildup <-  df_f$position_stat <- NA
df_temp <- rbind(df_f,df_u)
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$kickoff_time <- as.factor(df$kickoff_time)
leng = 3
uniqs <- sort(sapply(df, function(x) length(unique(x))), decreasing = T)
df_cnt <- data.frame(column = names(uniqs), nuniq = uniqs, row.names = NULL)
print(df_cnt)
nms <- as.character(df_cnt[df_cnt$nuniq < leng, 'column'])
df[nms] <- lapply(df[nms], as.factor)
return(df)
}
# Updated univariate plots ------------------------------------------------
library(ggplot2); library(tidyverse); library(cowplot);
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
df_f$Source <- 'Fantasy'
df_u$Source <- 'Understat'
df_f$shots <- df_f$key_passes <- df_f$xG <- df_f$xA <- df_f$npg <- df_f$npxG <- df_f$xGChain <- df_f$xGChain <- df_f$xGBuildup <-  df_f$position_stat <- NA
df_temp <- rbind(df_f,df_u)
df_temp$Source <- as.factor(df_temp$Source)
save_ggs <- function(df_temp, i, ax.tit, ax.text, wrap,sz,y_label_scl){
if(names(df_temp[i]) %in% c('shots', 'key_passes','xG','xA','npg','npxG','xGChain','xGBuildup')) df_temp <- df_temp[complete.cases(df_temp), ]
if(is.numeric(df_temp[[i]]))
{
ifelse(length(unique(df_temp[[i]])) < 30 && !anyNA(df_temp[[i]]),
ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) + geom_histogram(aes(y=..density..,), colour = 'black',size = sz,
breaks = seq(min(df_temp[[i]]),
max(df_temp[[i]]),
length.out = length(unique(df_temp[[i]])))) + facet_grid(Source~.,scales = "free_x",space = "free_x")  + theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold')),
ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) + geom_histogram(aes(y=..density..,), colour = 'black',size = sz) + facet_grid(Source~.,scales = "free_x",space = "free_x")+ theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.x = element_text(size = ax.text),
axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold')))
}
else {if(length(unique(df_temp[[i]])) < 20) ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) +  geom_bar(colour = 'black',size = sz)+ facet_grid(Source~.,scales = "free_x",space = "free_x") + theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.x = element_text(size = ax.text),
axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold'))
else ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) +  geom_bar(colour = 'black',size = sz)+ facet_grid(Source~.,scales = "free_x",space = "free_x") + theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.x=element_blank(),                                                                                                                                                                                                axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold'))}
ggsave(filename = paste0(i, '.pdf'), width = 15, height = 15)
}
setwd('C://Users//jd-vz//Desktop//Code//src//explore//pdf//fpl//')
for(i in 1:(ncol(df_temp) - 1)) save_ggs(df_temp, i, ax.tit = 75, ax.text = 50, wrap = 50, sz = 3.5,y_label_scl = 0.4)
# Updated univariate plots ------------------------------------------------
library(ggplot2); library(tidyverse); library(cowplot);
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
df_f$Source <- 'Fantasy'
df_u$Source <- 'Understat'
df_f$shots <- df_f$key_passes <- df_f$xG <- df_f$xA <- df_f$npg <- df_f$npxG <- df_f$xGChain <- df_f$xGChain <- df_f$xGBuildup <-  df_f$position_stat <- NA
df_temp <- rbind(df_f,df_u)
df_temp$Source <- as.factor(df_temp$Source)
save_ggs <- function(df_temp, i, ax.tit, ax.text, wrap,sz,y_label_scl){
if(names(df_temp[i]) %in% c('shots', 'key_passes','xG','xA','npg','npxG','xGChain','xGBuildup', 'position_stat')) df_temp <- df_temp[complete.cases(df_temp), ]
if(is.numeric(df_temp[[i]]))
{
ifelse(length(unique(df_temp[[i]])) < 30 && !anyNA(df_temp[[i]]),
ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) + geom_histogram(aes(y=..density..,), colour = 'black',size = sz,
breaks = seq(min(df_temp[[i]]),
max(df_temp[[i]]),
length.out = length(unique(df_temp[[i]])))) + facet_grid(Source~.,scales = "free_x",space = "free_x")  + theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold')),
ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) + geom_histogram(aes(y=..density..,), colour = 'black',size = sz) + facet_grid(Source~.,scales = "free_x",space = "free_x")+ theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.x = element_text(size = ax.text),
axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold')))
}
else {if(length(unique(df_temp[[i]])) < 20) ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) +  geom_bar(colour = 'black',size = sz)+ facet_grid(Source~.,scales = "free_x",space = "free_x") + theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.x = element_text(size = ax.text),
axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold'))
else ggplot(df_temp) + aes(x = df_temp[[i]]) + aes_string(names(df_temp[i])) +  geom_bar(colour = 'black',size = sz)+ facet_grid(Source~.,scales = "free_x",space = "free_x") + theme(axis.text=element_text(size=ax.tit),
axis.title.x=element_text(size=ax.tit),
axis.title.y=element_text(size=ax.tit*y_label_scl),
axis.text.x=element_blank(),                                                                                                                                                                                                axis.text.y = element_text(size = ax.text/2),
strip.text = element_text(size = wrap, face = 'bold'))}
ggsave(filename = paste0(i, '.pdf'), width = 15, height = 15)
}
setwd('C://Users//jd-vz//Desktop//Code//src//explore//pdf//fpl//')
for(i in 1:(ncol(df_temp) - 1)) save_ggs(df_temp, i, ax.tit = 75, ax.text = 50, wrap = 50, sz = 3.5,y_label_scl = 0.4)
View(df_temp)
View(df_temp)
setwd('C://Users//jd-vz//Desktop//Code//src//explore//pdf//fpl//')
for(i in 1:(ncol(df_temp))) save_ggs(df_temp, i, ax.tit = 75, ax.text = 50, wrap = 50, sz = 3.5,y_label_scl = 0.4)
setwd('C://Users//jd-vz//Desktop//Code//src//explore//pdf//fpl//')
for(i in 1:(ncol(df_temp))) save_ggs(df_temp, i, ax.tit = 75, ax.text = 50, wrap = 50, sz = 3.5,y_label_scl = 0.4)
for(i in 1:(ncol(df_temp))) save_ggs(df_temp, i, ax.tit = 75, ax.text = 50, wrap = 50, sz = 3.5,y_label_scl = 0.4)

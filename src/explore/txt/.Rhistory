fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
players_raw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_raw.csv')
players_type <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_type.csv')
teams <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/teams.csv')
head(fixtures) %>% kable
head(fixtures) %>% kable()
head(players_raw) %>% kable()
head(players_raw)[1:10] %>% kable()
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw)[1:10] %>% kable() %>% print()
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T)
head(players_raw)[1:10] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw)[1:8] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw)[1:8] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
\begin{longtable}{rrrrrrrr}
\toprule
chance\_of\_playing\_next\_round & chance\_of\_playing\_this\_round & code & cost\_change\_event & cost\_change\_event\_fall & cost\_change\_start & cost\_change\_start\_fall & dreamteam\_count\\
\midrule
0 & 0 & 37605 & 0 & 0 & -3 & 3 & 0\\
0 & 0 & 39476 & 0 & 0 & -2 & 2 & 0\\
100 & 50 & 41270 & 0 & 0 & -1 & 1 & 0\\
100 & 100 & 54694 & 0 & 0 & -7 & 7 & 3\\
100 & 100 & 58822 & 0 & 0 & -4 & 4 & 0\\
\addlinespace
100 & 100 & 59966 & 0 & 0 & -1 & 1 & 4\\
\bottomrule
\end{longtable}
head(players_raw)[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
# All features with respect to position -----------------------------------
autoEDA(df, y = 'position', IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 1, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//', filename = "ExploratoryPlots",
verbose = TRUE)
head(players_raw)[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
View(players_raw)
View(players_type)
View(teams)
View(teams)
library(knitr)
library(kableExtra)
fixtures <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/fixtures.csv')
players_raw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_raw.csv')
players_type <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players_type.csv')
teams <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/teams.csv')
gw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players/Aaron_Connolly_78/gw.csv')
history <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/players/Aaron_Connolly_78/history.csv')
View(history)
View(gw)
View(gw)
View(fixtures)
View(players_type)
View(players_type)
View(players_raw)
head(players_raw[.c('first_name')])[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
head(players_raw[,c('first_name')])[8:15] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
players_raw[,'first_name']
View(players_raw)
players_raw[c('first_name')]
View(players_raw)
players_raw[c('first_name', 'element_type')]
players_raw[c('first_name', 'second_name', 'id', 'element_type')]
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')]
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% kable()
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
head(players_raw)[c(8:11, 13:15)] %>% kable( "latex", longtable = T, booktabs = T) %>% print()
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'transfers_in')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'transfers_in')] %>% head(20) %>%  kable( "latex", longtable = T, booktabs = T)
players_raw[c('first_name', 'second_name', 'id', 'element_type', 'total_points', 'team')] %>% head(10) %>%  kable( "latex", longtable = T, booktabs = T)
merged_gw <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/gws/merged_gw.csv')
View(merged_gw)
View(merged_gw)
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/')
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/cleaned_fpl.csv')
train_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/fpl.csv')
View(train_fpl)
cleaned_fpl <- read.csv('C:/Users/jd-vz/Desktop/Code/data/2020-21/training/cleaned_fpl.csv')
View(cleaned_fpl)
fixtures$code
fixtures$team_h_difficulty
unique(fixtures$team_h_difficulty)
unique(fixtures$team_h_difficulty)
View(fixtures)
devtools::install_github("JaseZiv/worldfootballR")
library(worldfootballR)
understat_league_season_shots(league = "EPL", season_start_year = 2020)
# Separate numerical + categorical ----------------------------------------
df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
library(autoEDA)
# Initial distributions ---------------------------------------------------
df_temp <- df
autoEDA(df_temp)
autoEDA(df_temp, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE))
autoEDA(df_temp, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE)
library(tidyverse);
iris %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(negate(is.numeric)) %>%    gather() %>%    ggplot(aes(value))+ geom_bar()+ facet_wrap(~key)
u
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
my_plots <- lapply(names(iris), function(var_x){
p <-
ggplot(iris) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
my_plots <- lapply(names(iris), function(var_x){
p <-
ggplot(iris) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
library(cowplot)
my_plots <- lapply(names(iris), function(var_x){
p <-
ggplot(iris) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(iris[[var_x]])) {
p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
install.packages('skimr')
install.packages('skimr')
library(skimr)
skim(df)
p <- p + geom_density()
p <-   ggplot(df) + aes_string(total_points)
p <- p + geom_density()
p <-   ggplot(df) + aes_string(total_points)
p <-   ggplot(df) + aes_string('total_points')
p <- p + geom_density()
p
autoEDA(df_temp, IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 0.005, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE)
library(cowplot)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(df[[var_x]])) {
p <- p + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
library(cowplot)
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(df[[var_x]])) {
p <- p + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
}
# else {
#   p <- p + geom_bar()
# }
})
plot_grid(plotlist = my_plots)
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) +  geom_histogram(aes(y=..density..), colour="black", fill="white") +geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot() + geom_density()+ facet_wrap(~key);
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + facet_wrap(~key, scales = "free");
plot_grid(plotlist = my_plots, ncol = 3)
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
lapply(df, is.numeric())
lapply(df, is.numeric
lapply(df, is.numeric)
# df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
num_feat <- df[sapply(df, is.numeric)]
plot_grid(plotlist = my_plots, ncol = 4, nrow = 7)
plot_grid(plotlist = my_plots, ncol = 4, nrow = 7,align = 'hv')
devtools::install_github("stefan-schroedl/plotluck")
plotluck::plotluck(df, total_points)
plotluck::plotluck(df, 'total_points')
plotluck::plotluck(df, total_points)
plotluck::plotluck(df, total_points~.)
plotluck::plotluck(df, total_points~position)
plotluck::plotluck(df, total_points~was_home)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Fix unique understat errors ---------------------------------------------
df_u$npg <- as.factor(df_u$npg)
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# Encode discrete features as factors -------------------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Fix unique understat errors ---------------------------------------------
df_u$npg <- as.factor(df_u$npg)
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# Encode discrete features as factors -------------------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
name_date_viz(df_f,df_u, 'name')
name_date_viz <- function(df_f, df_u, ft){
df_1 <- rbind(df_f %>% select(ft)  %>% summarize(type = 'factor')%>% head(5), 0, df_f %>% select(ft)  %>% summarize(type = 'factor') %>% tail(5))
df_2 <- rbind(df_u %>% select(ft)  %>% summarize(type = 'factor')%>% head(5), 0, df_u %>% select(ft)  %>% summarize(type = 'factor') %>% tail(5))
df_3 <- cbind(df_1, df_2)
df_3$` ` <- df_3$` ` <- NULL
return(df_3)}
name_date_viz(df_f,df_u, 'name')
name_date_viz(df_f,df_u, 'player_name')
a <- name_date_viz(df_f,df_u, 'player_name')
a %>% arrange(desc(N))
a$N <- NULL
a
a %>% arrange(desc(N))
name_date_viz <- function(df_f, df_u, ft){
df_1 <- rbind(df_f %>% select(ft)  %>% summarize(type = 'factor')%>% arrange(desc(N)) %>%  head(5), 0, df_f %>% select(ft)  %>% summarize(type = 'factor') %>% arrange(N) %>%  tail(5))
df_2 <- rbind(df_u %>% select(ft)  %>% summarize(type = 'factor')%>% head(5), 0, df_u %>% select(ft)  %>% summarize(type = 'factor') %>% tail(5))
df_3 <- cbind(df_1, df_2)
df_3$` ` <- df_3$` ` <- NULL
return(df_3)}
a <- name_date_viz(df_f,df_u, 'player_name')
rbind(df_f %>% select(player_name)  %>% summarize(type = 'factor')%>% arrange(desc(N)) %>%  head(5),
0,
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(N) %>%  tail(5))
df_f %>% select(player_name)  %>% summarize(type = 'factor')
df_f %>% select(player_name)  %>% summarize(type = 'factor')
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(desc(N))
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order_by(desc(N))
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order_by(desc(N))
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order_by(N)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order_by(N)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(N)
rlang::last_error()
rlang::last_trace()
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order(N)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(order(N))
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor')
a[order(a$N)]
a[order(a$N)]
a[order(a$N),]
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(order(N))
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(order('N'))
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(order('N'))
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order('N')
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% order('N')
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange('N')
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(N)
colnames(A)
colnames(a)
a <- name_date_viz(df_f,df_u, 'player_name')
a[order(a$N),]
colnames(a)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange_all()
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange_all()
a[order(a$N,decreasing = TRUE),]
a <- name_date_viz(df_f,df_u, 'player_name')
a[order(a$N,decreasing = TRUE),]
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(.by_group = TRUE)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(N, .by_group = TRUE)
rbind(df_f %>% select(player_name)  %>% summarize(type = 'factor',)%>% arrange(desc('%')) %>%  head(5),
0,
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange(N) %>%  tail(5))
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% arrange('%')
colnames(a)
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor')
colnames(a)
View(a)
View(a)
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(' ')
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ')
a
a <- df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(N)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(N)
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N))
rbind(df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
rbind(df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_f %>% select(player_name)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
name_date_viz <- function(df_f, df_u, ft){
df_1 <- rbind(df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(N) %>% tail(5))
df_2 <- rbind(df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(N) %>% tail(5))
return(cbind(df_1, df_2))}
sink(file = 'player_names.txt'); name_date_viz(df_f, df_u, 'player_name') %>% xtable()%>% print(); sink(file = NULL)
sink(file = 'kickoff_time.txt'); name_date_viz(df_f, df_u, 'kickoff_time') %>% xtable()%>% print(); sink(file = NULL)
sink(file = 'team.txt'); team_viz(df_f, df_u) %>% xtable() %>% print(); sink(file = NULL)
# Merge name and kickoff time ---------------------------------------------
setwd('C://Users//jd-vz//Desktop//Code//src//explore//txt//')
sink(file = 'player_names.txt'); name_date_viz(df_f, df_u, 'player_name') %>% xtable()%>% print(); sink(file = NULL)
sink(file = 'kickoff_time.txt'); name_date_viz(df_f, df_u, 'kickoff_time') %>% xtable()%>% print(); sink(file = NULL)
name_date_viz <- function(df_f, df_u, ft){
df_1 <- rbind(df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
df_2 <- rbind(df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
return(cbind(df_1, df_2))}
# Merge name and kickoff time ---------------------------------------------
setwd('C://Users//jd-vz//Desktop//Code//src//explore//txt//')
sink(file = 'player_names.txt'); name_date_viz(df_f, df_u, 'player_name') %>% xtable()%>% print(); sink(file = NULL)
sink(file = 'kickoff_time.txt'); name_date_viz(df_f, df_u, 'kickoff_time') %>% xtable()%>% print(); sink(file = NULL)
team_viz <- function(df_f, df_u){
ft <- 'team'
df_1 <- rbind(df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
df_2 <- rbind(df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
ft <- 'opponent_team'
df_3 <- rbind(df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_f %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
df_4 <- rbind(df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% head(5),
0,
df_u %>% select(ft)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)) %>% tail(5))
return(cbind(df_1, df_2, df_3, df_4))
}
sink(file = 'team.txt'); team_viz(df_f, df_u) %>% xtable() %>% print(); sink(file = NULL)
team_viz <- function(df_f, df_u){
return(cbind(df_f %>% select(team)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)),
df_u %>% select(team)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)),
df_f %>% select(opponent_team)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N)),
df_u %>% select(opponent_team)  %>% summarize(type = 'factor') %>% select(- ' ') %>% arrange(desc(N))))}
sink(file = 'team.txt'); team_viz(df_f, df_u) %>% xtable() %>% print(); sink(file = NULL)

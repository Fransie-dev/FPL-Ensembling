p <- p + geom_density()
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
install.packages('skimr')
install.packages('skimr')
library(skimr)
skim(df)
p <- p + geom_density()
p <-   ggplot(df) + aes_string(total_points)
p <- p + geom_density()
p <-   ggplot(df) + aes_string(total_points)
p <-   ggplot(df) + aes_string('total_points')
p <- p + geom_density()
p
autoEDA(df_temp, IDFeats = NULL, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "density", bins = 20,
rotateLabels = FALSE, colorTheme = 1, theme = 2, color = "#26A69A",
transparency = 0.005, outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//', filename = "univariate",
verbose = TRUE)
library(cowplot)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(df[[var_x]])) {
p <- p + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
} else {
p <- p + geom_bar()
}
})
plot_grid(plotlist = my_plots)
library(cowplot)
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
my_plots <- lapply(names(df), function(var_x){
p <-
ggplot(df) +
aes_string(var_x)
if(is.numeric(df[[var_x]])) {
p <- p + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
}
# else {
#   p <- p + geom_bar()
# }
})
plot_grid(plotlist = my_plots)
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) +  geom_histogram(aes(y=..density..), colour="black", fill="white") +geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot() + geom_density()+ facet_wrap(~key);
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value))+ geom_density()+ facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + facet_wrap(~key);
df_temp %>% select_if(is.numeric) %>%    gather() %>%    ggplot(aes(value)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + facet_wrap(~key, scales = "free");
plot_grid(plotlist = my_plots, ncol = 3)
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
lapply(df, is.numeric())
lapply(df, is.numeric
lapply(df, is.numeric)
# df <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
num_feat <- df[sapply(df, is.numeric)]
plot_grid(plotlist = my_plots, ncol = 4, nrow = 7)
plot_grid(plotlist = my_plots, ncol = 4, nrow = 7,align = 'hv')
devtools::install_github("stefan-schroedl/plotluck")
plotluck::plotluck(df, total_points)
plotluck::plotluck(df, 'total_points')
plotluck::plotluck(df, total_points)
plotluck::plotluck(df, total_points~.)
plotluck::plotluck(df, total_points~position)
plotluck::plotluck(df, total_points~was_home)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Fix unique understat errors ---------------------------------------------
df_u$npg <- as.factor(df_u$npg)
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# Encode discrete features as factors -------------------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Fix unique understat errors ---------------------------------------------
df_u$npg <- as.factor(df_u$npg)
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# Encode discrete features as factors -------------------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$team <- as.factor(df$team)
df$clean_sheets <- as.factor(df$clean_sheets)
df$kickoff_time <- as.factor(df$kickoff_time)
df$opponent_team <- as.factor(df$opponent_team)
df$own_goals <- as.factor(df$own_goals)
df$penalties_missed <- as.factor(df$penalties_missed)
df$penalties_saved <- as.factor(df$penalties_saved)
df$red_cards <- as.factor(df$red_cards)
df$was_home <- as.factor(df$was_home)
df$yellow_cards <- as.factor(df$yellow_cards)
df$season <- as.factor(df$season)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
autoEDA(df_temp, 'was_home', sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = "univariate",
verbose = TRUE)
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
autoEDA(df_u, 'was_home', sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = "univariate",
verbose = TRUE)
autoEDA(df_u, 'was_home', sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = "univariate",
verbose = TRUE)
# Initial distributions ---------------------------------------------------
for(i in c('clean_sheets', 'own_goals', 'penalties_missed', 'was_home', 'red_cards', 'was_home', 'yellow_cards', 'season')) autoEDA(df_u, i, sampleRate = 1,
outcomeType = "automatic", maxUniques = 15, maxLevels = 25,
removeConstant = FALSE, removeZeroSpread = FALSE,
removeMajorityMissing = FALSE, imputeMissing = FALSE, clipOutliers = FALSE,
minLevelPercentage = 0.025, predictivePower = TRUE,
outlierMethod = "tukey", lowPercentile = 0.01, upPercentile = 0.99,
plotCategorical = "stackedBar", plotContinuous = "histogram",
outputPath = 'C://Users//jd-vz//Desktop//Code//src//explore//pdf//',
filename = i,
verbose = TRUE)
xtable(summarize(df_u, type = "factor",
variables = "clean_sheets", group = "was_home"),
caption = "Example table for Fisher's exact test",
label = "tab:Fisher")
xtable(summarize(df_u, type = "factor",
variables = "position", group = "was_home"),
caption = "Example table for Fisher's exact test",
label = "tab:Fisher")
# Pairs plot of ten highest correlated features ---------------------------
top_10 <- c('total_points', 'position', 'bps', 'bonus', 'influence', 'goals_scored', 'npg', 'ict_index', 'clean_sheets', 'assists', 'xG')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u <- df_u[top_10]
GGally::ggpairs(df_u, mapping = aes(colour = position, alpha = 0.6), title="Pairs plot: Unscaled, clustered dataset with Gender and Cluster included") + theme_grey(base_size = 10)
# Pairs plot of ten highest correlated features ---------------------------
library(ggplot2)
library(GGally)
top_10 <- c('total_points', 'position', 'bps', 'bonus', 'influence', 'goals_scored', 'npg', 'ict_index', 'clean_sheets', 'assists', 'xG')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u <- df_u[top_10]
ggpairs(df_u, mapping = aes(colour = position, alpha = 0.6), title="Pairs plot: Unscaled, clustered dataset with Gender and Cluster included") + theme_grey(base_size = 10)
load("C:/Users/jd-vz/Desktop/Code/src/explore/figs/.RData")
# Non-duplicated entries --------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u$shots <- df_u$key_passes <- df_u$xG <- df_u$xA <- df_u$npg <- df_u$npxG <- df_u$xGChain <- df_u$xGChain <- df_u$xGBuildup <- NA
dup <- anti_join(df_u, df_f)
unique(dup$player_name) # Instances in understat data not in fpl data
dup <- anti_join(df_f, df_u) # Instances in fpl data not in us data
length(unique(dup$player_name))
unique(dup$player_name)
dup <- anti_join(df_f[df_f$minutes > 0, ], df_u[df_u$minutes > 0, ]) # Instances in fpl data not in us data with non-zero min
a <- df_f[df_f$player_name %in% unique(dup$player_name),]
a <- a[a$minutes > 0,] # Three players logged
nrow(a[a$player_name == 'Vitor Ferreira',])
nrow(a[a$player_name == 'Adrián San Miguel del Castillo',])
nrow(a[a$player_name == 'João Pedro Junqueira de Jesus',])
mean(a[a$player_name == 'Vitor Ferreira','minutes'])
mean(a[a$player_name == 'Adrián San Miguel del Castillo','minutes'])
mean(a[a$player_name == 'João Pedro Junqueira de Jesus','minutes'])
mean(a[a$player_name == 'Vitor Ferreira','total_points'])
mean(a[a$player_name == 'Adrián San Miguel del Castillo','total_points'])
mean(a[a$player_name == 'João Pedro Junqueira de Jesus','total_points'])
library(dplyr)
library(dplyr)
# Non-duplicated entries --------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u$shots <- df_u$key_passes <- df_u$xG <- df_u$xA <- df_u$npg <- df_u$npxG <- df_u$xGChain <- df_u$xGChain <- df_u$xGBuildup <- NA
dup <- anti_join(df_u, df_f)
unique(dup$player_name) # Instances in understat data not in fpl data
dup <- anti_join(df_f, df_u) # Instances in fpl data not in us data
length(unique(dup$player_name))
unique(dup$player_name)
dup <- anti_join(df_f[df_f$minutes > 0, ], df_u[df_u$minutes > 0, ]) # Instances in fpl data not in us data with non-zero min
a <- df_f[df_f$player_name %in% unique(dup$player_name),]
a <- a[a$minutes > 0,] # Three players logged
nrow(a[a$player_name == 'Vitor Ferreira',])
nrow(a[a$player_name == 'Adrián San Miguel del Castillo',])
nrow(a[a$player_name == 'João Pedro Junqueira de Jesus',])
mean(a[a$player_name == 'Vitor Ferreira','minutes'])
mean(a[a$player_name == 'Adrián San Miguel del Castillo','minutes'])
mean(a[a$player_name == 'João Pedro Junqueira de Jesus','minutes'])
mean(a[a$player_name == 'Vitor Ferreira','total_points'])
mean(a[a$player_name == 'Adrián San Miguel del Castillo','total_points'])
mean(a[a$player_name == 'João Pedro Junqueira de Jesus','total_points'])
summary(a[a$player_name == 'Adrián San Miguel del Castillo',c('total_points', 'minutes')]) %>% kable('latex')
max(a[a$player_name == 'Vitor Ferreira','transfers_balance'])
max(a[a$player_name == 'Adrián San Miguel del Castillo','transfers_balance'])
max(a[a$player_name == 'João Pedro Junqueira de Jesus','transfers_balance'])
nrow(a[a$player_name == 'Adrián San Miguel del Castillo',])
nrow(a[a$player_name == 'João Pedro Junqueira de Jesus',])
# Non-duplicated entries --------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u$shots <- df_u$key_passes <- df_u$xG <- df_u$xA <- df_u$npg <- df_u$npxG <- df_u$xGChain <- df_u$xGChain <- df_u$xGBuildup <- NA
dup <- anti_join(df_u, df_f)
unique(dup$player_name) # Instances in understat data not in fpl data
dup <- anti_join(df_f, df_u) # Instances in fpl data not in us data
length(unique(dup$player_name))
unique(dup$player_name)
dup <- anti_join(df_f[df_f$minutes > 0, ], df_u[df_u$minutes > 0, ]) # Instances in fpl data not in us data with non-zero min
a <- df_f[df_f$player_name %in% unique(dup$player_name),]
a <- a[a$minutes > 0,] # Three players logged
nrow(a[a$player_name == 'Vitor Ferreira',])
nrow(a[a$player_name == 'Adrián San Miguel del Castillo',])
nrow(a[a$player_name == 'João Pedro Junqueira de Jesus',])
a
View(a)
# Read data ---------------------------------------------------------------
df_e <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//engineered_us.csv')
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_e <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//engineered_us.csv')
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_u[df_u$goals_scored == 9,]
df_u[df_u$goals_scored >2,]
df_u[df_u$goals_scored >8,]
df_u[df_u$goals_scored > 4,]
df_u[df_u$goals_scored > 2,]
df_u[df_u$goals_scored > 3,]
df_u[df_u$goals_conceded > 3,]
df_u[df_u$goals_conceded > 8,]
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_e <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//engineered_us.csv')
# For easy visualization of discrete features -----------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$kickoff_time <- as.factor(df$kickoff_time)
leng = 3
uniqs <- sort(sapply(df, function(x) length(unique(x))), decreasing = T)
df_cnt <- data.frame(column = names(uniqs), nuniq = uniqs, row.names = NULL)
print(df_cnt)
nms <- as.character(df_cnt[df_cnt$nuniq < leng, 'column'])
df[nms] <- lapply(df[nms], as.factor)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
df_e <- encode_factors(df_e)
df_r <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//rollback_us.csv')
df_r <- encode_factors(df_r)
df_r <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//rollback_us.csv')
df_r <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//')
df_r <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//rollbacked_us.csv')
df_r <- encode_factors(df_r)
setwd('C://Users//jd-vz//Desktop//Code//src//explore//txt//eng//')
setwd('C://Users//jd-vz//Desktop//Code//src//explore//txt//roll//')
df_r <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//rollbacked_us.csv')
df_r <- encode_factors(df_e)
df_r <- encode_factors(df_r)
# df_e %>% printx(filename = "eng_numeric_summary.txt", type = 'numeric')
df_e %>% select(-player_name, -kickoff_time, -team, -opponent_team) %>% printx(filename = "roll_factor_summary.txt", type = 'factor')
printx <- function(df, filename, type){
sink(file = filename)
print.xtable(summarize(df, type = type, test = FALSE), booktabs = FALSE)
sink(file = NULL)}
# df_e %>% printx(filename = "eng_numeric_summary.txt", type = 'numeric')
df_r %>% select(-player_name, -kickoff_time, -team, -opponent_team) %>% printx(filename = "roll_factor_summary.txt", type = 'factor')
xtable(summarize(df_r %>% select(team), type = 'factor',test = FALSE),booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r %>% select(team), type = 'factor',test = FALSE),booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r %>% select(team), type = 'factor',test = FALSE),booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r %>% select(team), type = 'factor',test = FALSE),booktabs = FALSE) %>% print.xtable()
# Libraries ---------------------------------------------------------------
library(ggplot2)
library(knitr)
library(dplyr)
library(kableExtra)
library(autoEDA)
library(rattle)
library(rpart)
library(rpart.plot)
library(partykit)
library(tidyrules)
library(papeR)
library(xtable)
library(tidyr)
# Read data ---------------------------------------------------------------
df_f <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_fpl.csv')
df_u <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//collected_us.csv')
df_e <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//engineered_us.csv')
df_r <- read.csv(file = 'C://Users//jd-vz//Desktop//Code//data//rollbacked_us.csv')
# Check encoding ----------------------------------------------------------
head(df_f[,colnames(df_f)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_u[,colnames(df_u)[grepl('factor|logical|character',sapply(df_f,class))]])
head(df_f[sapply(df_f, is.numeric)])
head(df_u[sapply(df_u, is.numeric)])
# Number of unique entries -----------------------------------------------
sapply(names(df_f), function(var_x){print(length(unique(df_f[[var_x]])))})
sapply(names(df_u), function(var_x){print(length(unique(df_u[[var_x]])))})
# For easy visualization of discrete features -----------------------------
encode_factors <- function(df){
df$player_name <- as.factor(df$player_name)
df$position <- as.factor(df$position)
df$kickoff_time <- as.factor(df$kickoff_time)
leng = 3
uniqs <- sort(sapply(df, function(x) length(unique(x))), decreasing = T)
df_cnt <- data.frame(column = names(uniqs), nuniq = uniqs, row.names = NULL)
print(df_cnt)
nms <- as.character(df_cnt[df_cnt$nuniq < leng, 'column'])
df[nms] <- lapply(df[nms], as.factor)
return(df)
}
df_f <- encode_factors(df_f)
df_u <- encode_factors(df_u)
df_e <- encode_factors(df_e)
df_r <- encode_factors(df_r)
xtable(summarize(df_r %>% select(team), type = 'factor',test = FALSE),booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r), type = 'numeric',test = FALSE),booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r, type = 'numeric',test = FALSE), booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r, type = 'factor',test = FALSE), booktabs = FALSE) %>% print.xtable()
xtable(summarize(df_r %>% select(-kickoff_time, -opponent_team, -team, -player_name), type = 'factor',test = FALSE), booktabs = FALSE) %>% print.xtable()
